Spark SQL POC– Machine and Sensor Data Analysis
=====================================================

INPUT DATASET DESCRIPTION:
==========================

building.csv contains the details of the top 20 buildings all over the world and HVAC.csv contains the target temperature and the actual temperature along with the building Id.

HVAC (heating, ventilating/ventilation, and air conditioning) is the technology of indoor and vehicular environmental comfort. Its goal is to provide thermal comfort and acceptable indoor air quality. Through the HVAC sensors, we will get the temperature of the buildings.

Here are the columns that are present in the datasets:

Building.csv – BuildingID, BuildingMgr, BuildingAge, HVACproduct,Country

HVAC.csv – Date, Time, TargetTemp, ActualTemp, System, SystemAge, BuildingID

INPUT DATASET LINK:
-------------------
https://drive.google.com/drive/folders/0ByJLBTmJojjzOUd0ek9UZVIzMms


PROBLEM STATEMENT 1:  PROVIDE the temperature changes in the building. Create one new column tempchange, which will set to 1 if there is a temperature change of either +5 or -5 between the actual_temperature and the target_temperature.
======================================================================
Source Code:
============

hadoop fs -mkdir -p /user/hadoop/input/
hadoop fs -put /home/cloudera/Downloads/building.csv /user/hadoop/input/
hadoop fs -put /home/cloudera/Downloads/HVAC.csv /user/hadoop/input/
spark-shell

//READING DATA FROM building.csv
val rdd11 = sc.textFile("hdfs://quickstart.cloudera:8020/user/hadoop/input/building.csv")
val header1	 = rdd11.first
//removal of header from data for data analysis
val rdd12 = rdd11.filter{ line => line != header1}
val rdd13 = rdd12.map{ line => line.toString() }
val rdd14 = rdd13.map(_.split(","))
case class bldg(bldgid:Int , bldgmgr:String , bldgage: Int , hvacproduct:String , country:String)
val df11 = rdd14.map(x=> bldg(x(0).toInt, x(1), x(2).toInt, x(3), x(4))).toDF
df11.registerTempTable("bldg")
sqlContext.sql("select * from bldg").show()

//READING DATA FROM hvac.csv
val rdd21 = sc.textFile("hdfs://quickstart.cloudera:8020/user/hadoop/input/HVAC.csv")
val header2 = rdd21.first
//removal of header from data for data analysis
val rdd22 = rdd21.filter{ line => line != header2}
val rdd23 = rdd22.map{ line => line.toString() }
val rdd24 = rdd23.map(_.split(","))
case class hvac(date: String , time: String , targettemp:Int , actualtemp:Int , system:Int , systemage:Int , bldgid:Int)
val df21 = rdd24.map( x => hvac(x(0), x(1), x(2).toInt, x(3).toInt, x(4).toInt, x(5).toInt, x(6).toInt)).toDF
df21.registerTempTable("hvac")
sqlContext.sql("select * from hvac").show()


val df22 = sqlContext.sql("select *, IF((targettemp - actualtemp) > 5, 1, IF((targettemp - actualtemp) < -5, 1, 0)) AS tempchange from hvac order by bldgid asc")
df22.registerTempTable("temphvac")
sqlContext.sql("select * from temphvac").show()

Output:

+-------+--------+----------+----------+------+---------+------+----------+
|   date|    time|targettemp|actualtemp|system|systemage|bldgid|tempchange|
+-------+--------+----------+----------+------+---------+------+----------+
| 6/9/13|20:43:51|        66|        57|    14|       15|     1|         1|
| 6/7/13| 5:13:19|        68|        64|     6|        6|     1|         0|
|6/25/13|12:13:20|        69|        62|     1|        3|     1|         1|
|6/13/13|18:13:19|        67|        68|     2|       14|     1|         0|
|6/20/13|13:33:07|        68|        80|     6|       14|     1|         1|
|6/18/13|17:00:01|        68|        61|    10|       25|     1|         1|
|6/24/13|17:33:07|        65|        57|     6|       19|     1|         1|
|6/15/13|20:13:19|        67|        66|     8|       18|     1|         0|
|6/17/13|16:00:01|        65|        59|    19|       10|     1|         1|
|6/18/13|23:13:19|        66|        68|    20|       30|     1|         0|
| 6/8/13|13:13:19|        70|        72|    20|       19|     1|         0|
| 6/3/13|20:13:20|        67|        69|    13|        2|     1|         0|
|6/24/13|23:45:56|        70|        77|    13|       28|     1|         1|
|6/13/13| 6:33:07|        68|        62|    17|        8|     1|         1|
|6/14/13| 1:13:20|        70|        68|     6|        1|     1|         0|
|6/22/13|15:33:07|        69|        67|     8|        7|     1|         0|
|6/17/13|22:13:19|        70|        77|    14|       16|     1|         1|
|6/14/13|13:00:01|        68|        62|    14|       30|     1|         1|
|6/23/13| 4:43:51|        70|        80|    12|       24|     1|         1|
|6/19/13| 0:43:51|        65|        58|     3|       20|     1|         1|
+-------+--------+----------+----------+------+---------+------+----------+



PROBLEM STATEMENT 2:  FIND THE COUNTRIES which have maximum temperature change areas.
=====================================================================================

val buildhvac = sqlContext.sql("select h.*, b.country, b.hvacproduct from bldg b join temphvac h on h.bldgid = b.bldgid where h.tempchange == 1")

buildhvac.groupBy("b.country").sum("h.tempchange").orderBy(sum("h.tempchange").desc).show


Output:
--------


+------------+---------------+                                                  
|     country|sum(tempchange)|
+------------+---------------+
|     Finland|            473|
|      France|            251|
|   Hong Kong|            248|
|      Turkey|            243|
|   Indonesia|            243|
|       China|            241|
|South Africa|            237|
|       Egypt|            236|
|Saudi Arabia|            233|
|      Israel|            232|
|      Canada|            232|
|   Singapore|            230|
|   Argentina|            230|
|      Mexico|            228|
|      Brazil|            226|
|   Australia|            225|
|         USA|            213|
|     Belgium|            199|
|     Germany|            196|
+------------+---------------+





